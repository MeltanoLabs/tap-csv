[tool.poetry]
name = "tap-csv"
version = "1.1.0"
description = "Singer tap for CSV, built with the Meltano SDK for Singer Taps."
authors = ["Pat Nadolny"]
keywords = [
    "ELT",
    "CSV",
]
license = "Apache-2.0"

[tool.poetry.dependencies]
python = ">=3.8"
fsspec = "~=2024.6.1"
singer-sdk = "~=0.40.0"
typing-extensions = { version = "~=4.12.2", python = "<3.12" }
universal-pathlib = "~=0.2.3"

# Extras
dropboxdrivefs = {version = "~=1.4.1", optional = true}

[tool.poetry.extras]
dropbox = ["dropboxdrivefs"]

[tool.poetry.group.dev.dependencies]
coverage = ">=7.2"
mypy = ">=1.4"
pytest = ">=7.4.4"
ruff = ">=0.1.15"
types-requests = ">=2.31.0"

[build-system]
requires = ["poetry-core==1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# CLI declaration
tap-csv = 'tap_csv.tap:TapCSV.cli'

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
ignore = [
    "COM812",
    "D105",
    "D203",
    "D213",
]
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle (errors)
    "W",    # pycodestyle (warnings)
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "I",    # isort
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "EM",   # flake8-errmsg
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ERA",  # eradicate
    "ARG",  # flake8-unused-arguments
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
